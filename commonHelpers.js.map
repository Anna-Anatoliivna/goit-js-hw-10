{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst refs = {\n    datePicker: document.querySelector('#datetime-picker'),\n    btnStart: document.querySelector('[data-start]'),\n    daysEl: document.querySelector('[data-days]'),\n    hoursEl: document.querySelector('[data-hours]'),\n    minutesEl: document.querySelector('[data-minutes]'),\n    secondsEl: document.querySelector('[data-seconds]'),\n};\n    \nlet intervalId;\nlet initTime;\n\nrefs.btnStart.disabled = true; \nrefs.btnStart.addEventListener('click', () => {\n       intervalId = setInterval(() => {\n         renderTime(initTime); \n         refs.btnStart.disabled = true; \n       }, 1000);\n     });\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction renderTime(time) {\n  const currentTime = Date.now();\n  const diff = initTime - currentTime; \n  const obj = convertMs(diff);\n  refs.daysEl.innerText = String(obj.days).padStart(2,  '0');\n  refs.hoursEl.innerText = String(obj.hours).padStart(2,  '0');\n  refs.minutesEl.innerText = String(obj.minutes).padStart(2,  '0');\n  refs.secondsEl.innerText = String(obj.seconds).padStart(2, '0');\n  refs.btnStart.disabled = false;\n  if (diff <= 0) {\n    clearInterval(intervalId); \n             };\n};\n\nfunction validateTime(time) {\n  return time <= Date.now();\n};\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    initTime = selectedDates[0];\n           if (validateTime(initTime)) {\n      iziToast.error({\n        position: `topRight`,\n          title: `error`,\n        message: 'Please choose a date in the future',\n      });\n    } \n    refs.btnStart.disabled = false;\n  },\n};\nflatpickr('#datetime-picker', options);\n\n    "],"names":["refs","intervalId","initTime","renderTime","convertMs","ms","days","hours","minutes","seconds","time","currentTime","diff","obj","validateTime","options","selectedDates","iziToast","flatpickr"],"mappings":"+IAKA,MAAMA,EAAO,CACT,WAAY,SAAS,cAAc,kBAAkB,EACrD,SAAU,SAAS,cAAc,cAAc,EAC/C,OAAQ,SAAS,cAAc,aAAa,EAC5C,QAAS,SAAS,cAAc,cAAc,EAC9C,UAAW,SAAS,cAAc,gBAAgB,EAClD,UAAW,SAAS,cAAc,gBAAgB,CACtD,EAEA,IAAIC,EACAC,EAEJF,EAAK,SAAS,SAAW,GACzBA,EAAK,SAAS,iBAAiB,QAAS,IAAM,CACvCC,EAAa,YAAY,IAAM,CAC7BE,EAAmB,EACnBH,EAAK,SAAS,SAAW,EAC1B,EAAE,GAAI,CACd,CAAM,EAEN,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASN,EAAWO,EAAM,CACxB,MAAMC,EAAc,KAAK,MACnBC,EAAOV,EAAWS,EAClBE,EAAMT,EAAUQ,CAAI,EAC1BZ,EAAK,OAAO,UAAY,OAAOa,EAAI,IAAI,EAAE,SAAS,EAAI,GAAG,EACzDb,EAAK,QAAQ,UAAY,OAAOa,EAAI,KAAK,EAAE,SAAS,EAAI,GAAG,EAC3Db,EAAK,UAAU,UAAY,OAAOa,EAAI,OAAO,EAAE,SAAS,EAAI,GAAG,EAC/Db,EAAK,UAAU,UAAY,OAAOa,EAAI,OAAO,EAAE,SAAS,EAAG,GAAG,EAC9Db,EAAK,SAAS,SAAW,GACrBY,GAAQ,GACV,cAAcX,CAAU,CAE5B,CAEA,SAASa,EAAaJ,EAAM,CAC1B,OAAOA,GAAQ,KAAK,KACtB,CAEA,MAAMK,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBd,EAAWc,EAAc,CAAC,EACfF,EAAaZ,CAAQ,GAC9Be,EAAS,MAAM,CACb,SAAU,WACR,MAAO,QACT,QAAS,oCACjB,CAAO,EAEHjB,EAAK,SAAS,SAAW,EAC1B,CACH,EACAkB,EAAU,mBAAoBH,CAAO"}